name: rootfs_elish

on:
  workflow_dispatch:

jobs:
  kernel:
    runs-on: ubuntu-24.04-arm
    timeout-minutes: 20
    strategy:
            matrix:
                version: [6.13.0]
    steps:
      - uses: actions/checkout@v4

      - name: Install Dependencies
        run: sudo apt update && sudo apt install build-essential gcc-aarch64-linux-gnu bc flex bison 7zip kmod bash cpio binutils tar git wget dpkg libssl-dev python3 python-is-python3

      - name: Build kernel
        run: sudo sh elish-kernel_build.sh ${{ github.workspace }} ${{ matrix.version }}

      - name: Upload linux.deb
        uses: actions/upload-artifact@v4
        with:
          name: linux-xiaomi-elish_${{ matrix.version }}
          path: ${{ github.workspace }}/linux-xiaomi-elish.deb

      - name: Upload CSOT boot.img
        uses: actions/upload-artifact@v4
        with:
          name: boot-xiaomi-elish_${{ matrix.version }}_csot.img
          path: ${{ github.workspace }}/boot_csot.img

      - name: Upload BOE boot.img
        uses: actions/upload-artifact@v4
        with:
          name: boot-xiaomi-elish_${{ matrix.version }}_boe.img
          path: ${{ github.workspace }}/boot_boe.img

  rootfs:
    runs-on: ubuntu-24.04-arm
    timeout-minutes: 20
    strategy:
            matrix:
                desktop: [lomiri-desktop-session]
    steps:
      - uses: actions/checkout@v4
      - name: Install Dependencies
        run: sudo apt update && sudo apt install unzip bash tar git wget dpkg

      - name: Build rootfs
        run: sudo sh elish-rootfs_build.sh ${{ matrix.desktop }} ${{ github.workspace }}

      - name: Upload rootfs.img
        uses: actions/upload-artifact@v4
        with:
          name: between_${{ matrix.desktop }}
          path: rootfs.7z
          compression-level: 0

  alsa:
    needs: rootfs
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - uses: actions/checkout@v4

      - name: Pack Alsa Use Case Configuration into .deb
        run: cd ${{ github.workspace }} && dpkg-deb --build --root-owner-group alsa-xiaomi-elish

      - name: Upload alsa.deb
        uses: actions/upload-artifact@v4
        with:
          name: alsa-xiaomi-elish
          path: ${{ github.workspace }}/alsa-xiaomi-elish.deb
  
  firmware:
    needs: rootfs
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - uses: actions/checkout@v4

      - name: Pack firmware into .deb
        run: cd ${{ github.workspace }} && dpkg-deb --build --root-owner-group firmware-xiaomi-elish

      - name: Upload firmware.deb
        uses: actions/upload-artifact@v4
        with:
          name: firmware-xiaomi-elish
          path: ${{ github.workspace }}/firmware-xiaomi-elish.deb

  device-xiaomi-elish:
    needs: rootfs
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - uses: actions/checkout@v4

      - name: Pack device into .deb
        run: cd ${{ github.workspace }} && dpkg-deb --build --root-owner-group device-xiaomi-elish

      - name: Upload device.deb
        uses: actions/upload-artifact@v4
        with:
          name: device-xiaomi-elish
          path: ${{ github.workspace }}/device-xiaomi-elish.deb

  rootfs-packager:
    needs: [kernel, alsa, firmware, device-xiaomi-elish]
    runs-on: ubuntu-24.04-arm
    timeout-minutes: 10
    strategy:
            matrix:
                desktop: [ubuntu-desktop]
                kernel: [6.13.0]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          pattern: between_${{ matrix.desktop }}*   
      - uses: actions/download-artifact@v4
        with:
          pattern: alsa-xiaomi-elish*
      - uses: actions/download-artifact@v4
        with:
          pattern: firmware-xiaomi-elish
      - uses: actions/download-artifact@v4
        with:
          pattern: linux-xiaomi-elish_${{ matrix.kernel }}
      - name: Install Dependencies
        run: sudo apt update && sudo apt install unzip 7zip bash tar git wget dpkg

      - name: Package rootfs
        run: sudo sh elish-rootfs_package.sh ${{ github.workspace }}
        
      - name: Upload rootfs.7z
        uses: actions/upload-artifact@v4
        with:
          name: rootfs_${{ matrix.desktop }}_${{ matrix.kernel }}
          path: rootfs.7z
          compression-level: 0
          
  cleaner:
    runs-on: ubuntu-24.04-arm
    needs: rootfs-packager
    steps:
      - uses: geekyeggo/delete-artifact@v5
        with:
          name: between_*
